import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

data = {
    'team1_points': [90, 85, 88, 92, 95, 89, 87, 90],
    'team2_points': [80, 86, 85, 82, 79, 84, 91, 88],
    'team1_shots': [25, 20, 22, 26, 28, 24, 23, 25],
    'team2_shots': [15, 18, 20, 14, 13, 17, 16, 19],
    'won': [1, 0, 1, 1, 1, 0, 0, 1]  # 1 - команда 1 выиграла, 0 - команда 2 выиграла
}

df = pd.DataFrame(data)


X = df[['team1_points', 'team2_points', 'team1_shots', 'team2_shots']]
y = df['won']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)


model = LogisticRegression()
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
confusion = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print('Confusion Matrix:')
print(confusion)
print('Classification Report:')
print(report)


x_range = np.linspace(70, 100, 100).reshape(-1, 1)
team2_points_mean = df['team2_points'].mean()
predicted_probabilities = model.predict_proba(np.hstack((x_range, np.full_like(x_range, team2_points_mean),
                                                            np.full_like(x_range, df['team1_shots'].mean()),
                                                            np.full_like(x_range, df['team2_shots'].mean()))))[:, 1]

# Построение графика
plt.figure(figsize=(10, 6))
plt.plot(x_range, predicted_probabilities, color='blue')
plt.title('Вероятность победы команды 1 в зависимости от очков')
plt.xlabel('Очки команды 1')
plt.ylabel('Вероятность победы (Команда 1)')
plt.axhline(0.5, color='red', linestyle='--', label='Порог вероятности (0.5)')
plt.legend()
plt.grid()
plt.show()
